      fetch('/images')
      .then(res => res.json())
      .then(images => {
        const gallery = document.getElementById('gallery');

        // Create links and images inside gallery
        images.forEach(url => {
          const link = document.createElement('a');
          link.href = url;                     // full-size image URL for lightbox
          link.setAttribute('data-lightbox', 'gallery');

          const img = document.createElement('img');
          const transformedUrl = url.replace('/upload/', '/upload/w_800,q_auto,f_auto/');
          img.src = transformedUrl;
          img.alt = 'Cloudinary Image';
          img.style.width = '300px';
          img.style.margin = '10px';
          img.loading = 'lazy';

          link.appendChild(img);
          gallery.appendChild(link);
        });

        // After images are loaded, setup lightbox with navigation

        const links = gallery.querySelectorAll('a[data-lightbox]');
        let imagesList = Array.from(links).map(link => link.href);
        let currentIndex = 0;

        const lightboxContainer = document.createElement('div');
        const lightboxImage = document.createElement('img');
        const prevBtn = document.createElement('button');
        const nextBtn = document.createElement('button');

        lightboxContainer.id = 'lightbox';
        prevBtn.id = 'lightbox-prev';
        nextBtn.id = 'lightbox-next';

        prevBtn.textContent = '‹';  // Left arrow
        nextBtn.textContent = '›';  // Right arrow

        // Style buttons (you can move to CSS if preferred)
        [prevBtn, nextBtn].forEach(btn => {
          btn.style.position = 'absolute';
          btn.style.top = '50%';
          btn.style.transform = 'translateY(-50%)';
          btn.style.fontSize = '3rem';
          btn.style.color = '#fff';
          btn.style.background = 'rgba(0,0,0,0.3)';
          btn.style.border = 'none';
          btn.style.padding = '0 15px';
          btn.style.cursor = 'pointer';
          btn.style.userSelect = 'none';
          btn.style.zIndex = '10001';
        });

        prevBtn.style.left = '20px';
        nextBtn.style.right = '20px';

        lightboxContainer.appendChild(lightboxImage);
        lightboxContainer.appendChild(prevBtn);
        lightboxContainer.appendChild(nextBtn);
        document.body.appendChild(lightboxContainer);

        function openLightbox(index) {
          currentIndex = index;
          lightboxImage.src = imagesList[currentIndex];
          lightboxContainer.classList.add('active');
        }

        function closeLightbox() {
          lightboxContainer.classList.remove('active');
        }

        function showPrev() {
          currentIndex = (currentIndex - 1 + imagesList.length) % imagesList.length;
          lightboxImage.src = imagesList[currentIndex];
        }

        function showNext() {
          currentIndex = (currentIndex + 1) % imagesList.length;
          lightboxImage.src = imagesList[currentIndex];
        }

        links.forEach((link, index) => {
          link.addEventListener('click', e => {
            e.preventDefault();
            openLightbox(index);
          });
        });

        lightboxContainer.addEventListener('click', e => {
          // Close only if clicked outside image and buttons
          if (e.target === lightboxContainer) {
            closeLightbox();
          }
        });

        prevBtn.addEventListener('click', e => {
          e.stopPropagation();
          showPrev();
        });

        nextBtn.addEventListener('click', e => {
          e.stopPropagation();
          showNext();
        });

        document.addEventListener('keydown', e => {
          if (!lightboxContainer.classList.contains('active')) return;

          if (e.key === 'ArrowLeft') {
            showPrev();
          } else if (e.key === 'ArrowRight') {
            showNext();
          } else if (e.key === 'Escape') {
            closeLightbox();
          }
        });

        // Touch swipe support
        let touchStartX = 0;
        let touchEndX = 0;

        lightboxContainer.addEventListener('touchstart', e => {
          touchStartX = e.changedTouches[0].screenX;
        });

        lightboxContainer.addEventListener('touchend', e => {
          touchEndX = e.changedTouches[0].screenX;
          handleGesture();
        });

        function handleGesture() {
          const swipeDistance = touchEndX - touchStartX;
          if (Math.abs(swipeDistance) > 50) {
            if (swipeDistance > 0) {
              showPrev();
            } else {
              showNext();
            }
          }
        }
      })
      .catch(err => {
        console.error('Failed to load images:', err);
      });
